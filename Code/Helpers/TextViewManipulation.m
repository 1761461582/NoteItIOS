//
// Created by Bruno Wernimont on 2013
// Copyright 2013 NoteIT
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#import "TextViewManipulation.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
@implementation TextViewManipulation


////////////////////////////////////////////////////////////////////////////////////////////////////
- (id)initWithTextView:(UITextView *)textView {
    self = [self init];
    if (self) {
        self.textView = textView;
    }
    return self;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL)hasStyleTypeOnSelectedRange:(TextViewManipulationStyleType)type {
    return [self hasStyleTextOnSelectedRange:[self textWithType:type]];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)removeStyleFromSelectedRange:(TextViewManipulationStyleType)type {
    [self removeStyleTextFromSelectedRange:[self textWithType:type]];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)addStyleOnSelectedRange:(TextViewManipulationStyleType)type {
    [self addStyleTextOnSelectedRange:[self textWithType:type]];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL)hasStyleTextOnSelectedRange:(NSString *)text {
    return NO;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)removeStyleTextFromSelectedRange:(NSString *)text {
    
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)addStyleTextOnSelectedRange:(NSString *)text {
    
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)deleteCurrentLine {
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)pushTitleLevelOnSelectedRange {
    
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)toogleOrderedList:(BOOL)ordered {
    
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSString *)textWithType:(TextViewManipulationStyleType)type {
    if (TextViewManipulationStyleTypeBold == type) {
        return @"**";
    } else if (TextViewManipulationStyleTypeItalic == type) {
        return @"_";
    } else if (TextViewManipulationStyleTypeOrderedList == type) {
        return @"1.";
    } else if (TextViewManipulationStyleTypeUnOrderedList == type) {
        return @"-";
    }
    
    return nil;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL)isSelectedRangeOrderedList {
    return NO;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL)isSelectedRangeUnOrderedList {
    return NO;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark Text manipulations


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSUInteger)numberOfLines {
    return [[self.text componentsSeparatedByString:@"\n"] count];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSString *)lineWithNumber:(NSUInteger)line {
    NSArray *lines = [self.text componentsSeparatedByString:@"\n"];
    return [lines objectAtIndex:line];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSUInteger)lineNumberWithRange:(NSRange)range {
    NSString *beforeRangeText = [self.text substringWithRange:NSMakeRange(0, range.location + range.length)];
    NSArray *lines = [beforeRangeText componentsSeparatedByString:@"\n"];
    return [lines count];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSUInteger)lineNumberForSelection {
    return [self lineNumberWithRange:[self lineRangeForSelection]];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSRange)lineRangeWithRange:(NSRange)range {
    if (range.length > 0)
        return range;
    
    if ([self.text length] == 0)
        return NSMakeRange(0, 0 );
    
    NSString *stringAfterSelection = [self.text substringFromIndex:range.location];
    NSArray *afterSelectionLines = [stringAfterSelection componentsSeparatedByString:@"\n"];
    NSString *afterText = [afterSelectionLines firstObject];
    
    NSString *stringBeforeSelection = [self.text substringToIndex:range.location];
    NSArray *beforeSelectionLines = [stringBeforeSelection componentsSeparatedByString:@"\n"];
    NSString *beforeText = [beforeSelectionLines lastObject];
    
    return NSMakeRange(range.location - beforeText.length, afterText.length + beforeText.length);
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSRange)lineRangeForSelection {
    return [self lineRangeWithRange:self.selectedRange];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSString *)lineForSelection {
    return [self lineWithRange:[self lineRangeForSelection]];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSString *)lineWithRange:(NSRange)range {
    return [self.text substringWithRange:range];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)replaceRange:(NSRange)range withText:(NSString *)text {
    NSRange beforeSelectedRange = self.selectedRange;
    self.textView.selectedRange = range;
    [self.textView replaceRange:self.textView.selectedTextRange withText:text];
    self.selectedRange = beforeSelectedRange;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSAttributedString *)attributedString {
    return nil;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark Getters and setters


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setSelectedRange:(NSRange)selectedRange {
    self.textView.selectedRange = selectedRange;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSRange)selectedRange {
    return self.textView.selectedRange;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setText:(NSString *)text {
    self.textView.text = text;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSString *)text {
    return self.textView.text;
}


@end
