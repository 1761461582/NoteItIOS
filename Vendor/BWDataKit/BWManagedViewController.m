//
// Created by Bruno Wernimont on 2013
// Copyright 2012 BWDataKit
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Inspired by the great https://github.com/soffes/ssdatakit
//

#import "BWManagedViewController.h"

#import "CoreData+MagicalRecord.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
@interface BWManagedViewController ()

@end

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
@implementation BWManagedViewController


////////////////////////////////////////////////////////////////////////////////////////////////////
- (id)init {
    self = [super init];
    if (self) {
        [self initializeManagedViewController];
    }
    return self;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        [self initializeManagedViewController];
    }
    return self;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    
    if (YES == self.shouldPerformFetchOnViewWillAppear) {
        [self.fetchedResultsController performFetch:nil];
        [self fetchedControllerDidLoadObjects];
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark CoreData


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSFetchRequest *)fetchRequest {
    NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];
    fetchRequest.entity = [NSEntityDescription entityForName:NSStringFromClass([self entityClass])
                                      inManagedObjectContext:self.managedObjectContext];
    
    NSArray *sortDescriptors = [self sortDescriptors];
    
    if (nil == sortDescriptors) {
        if (nil != [self sortDescriptor]) {
            fetchRequest.sortDescriptors = [NSArray arrayWithObject:[self sortDescriptor]];
        }
    } else {
        fetchRequest.sortDescriptors = sortDescriptors;
    }

    fetchRequest.predicate = [self predicate];
    return fetchRequest;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (Class)entityClass {
    return nil;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSArray *)sortDescriptors {
    return nil;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSSortDescriptor *)sortDescriptor {
    return nil;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSPredicate *)predicate {
    return nil;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSManagedObjectContext *)managedObjectContext {
    if (nil == _managedObjectContext) {
        _managedObjectContext = [NSManagedObjectContext MR_contextForCurrentThread];
    }
    
    return _managedObjectContext;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSString *)sectionNameKeyPath {
    return nil;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSString *)cacheName {
    return NSStringFromClass([self class]);
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (NSFetchedResultsController *)fetchedResultsController {
    if (nil == _fetchedResultsController) {
        [NSFetchedResultsController deleteCacheWithName:[self cacheName]];
        
        _fetchedResultsController = [[NSFetchedResultsController alloc]
                                                  initWithFetchRequest:self.fetchRequest
                                                  managedObjectContext:self.managedObjectContext
                                                  sectionNameKeyPath:[self sectionNameKeyPath]
                                                  cacheName:[self cacheName]];
        
        _fetchedResultsController.delegate = self;
    }
    
    return _fetchedResultsController;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark NSFetchedResultsControllerDelegate


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller {
    [self fetchedControllerDidLoadObjects];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark View


////////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL)hasContent {
    return [self.fetchedResultsController.fetchedObjects count] > 0;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark Private


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)fetchedControllerDidLoadObjects {
    if (![self respondsToSelector:@selector(tableView)] && // Check that we are not in a tableview controller
        [self.fetchedResultsController fetchedObjects].count > 0) {
        
        _managedObject = [[self.fetchedResultsController fetchedObjects] objectAtIndex:0];
    }
    
    [self updateViewData];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)initializeManagedViewController {
}


@end
